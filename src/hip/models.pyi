import collections
import typing

HeadersType = typing.Union[
    typing.Mapping[str, str],
    typing.Mapping[bytes, bytes],
    typing.Iterable[typing.Tuple[str, str]],
    typing.Iterable[typing.Tuple[bytes, bytes]],
    "Headers",
]

class Headers(collections.abc.MutableMapping):
    """Mostly mimicking multidict without the combined function call names.
    Requests header structure is very simple and doesn't expose a lot
    of functionality.

    We want to preserve order and also casing internally while still
    being case-insensitive when it comes to get/set.
    """

    def __init__(self, headers: HeadersType = None): ...
    def get_one(self, k: typing.AnyStr, default=None) -> typing.Optional[str]: ...
    get = get_one
    def get_all(self, k: typing.AnyStr) -> typing.List[str]: ...
    def add(self, k: typing.AnyStr, v: typing.AnyStr) -> None: ...
    def pop_one(self, k: typing.AnyStr, default=None) -> typing.Optional[str]: ...
    pop = pop_one
    def pop_all(self, k: typing.AnyStr) -> typing.List[str]: ...
    def keys(self) -> typing.Iterator[str]: ...
    def values(self) -> typing.Iterator[str]: ...
    def items(self) -> typing.Iterator[typing.Tuple[str, str]]: ...
    def copy(self) -> "Headers": ...
    def setdefault(self, k: typing.AnyStr, default: typing.AnyStr = ...) -> str: ...
    def __getitem__(self, item: typing.AnyStr) -> str:
        not_found = object()
        val = self.get(item, default=not_found)
        if val is not_found:
            raise KeyError(item)
        return val
    def __setitem__(self, key: typing.AnyStr, value: typing.AnyStr) -> None: ...
    def __delitem__(self, key: typing.AnyStr) -> None: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __len__(self) -> int: ...
