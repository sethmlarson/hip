import typing

class _NeedDataType: ...

NEED_DATA = _NeedDataType()

class Connection:
    def send(self, event: _EventBundle) -> bytes: ...
    def receive_data(self, data: bytes) -> None: ...
    def next_event(self) -> typing.Union[_EventBundle, _NeedDataType]: ...
    def start_next_cycle(self) -> None: ...

class _EventBundle: ...

class Request(_EventBundle):
    def __init__(
        self,
        method: str,
        target: bytes,
        headers: typing.List[typing.Tuple[bytes, bytes]],
        http_version: bytes,
    ): ...

class _ResponseBase(_EventBundle):
    @property
    def status_code(self) -> int: ...
    @property
    def headers(self) -> typing.List[typing.Tuple[bytes, bytes]]: ...
    @property
    def http_version(self) -> bytes: ...

class InformationalResponse(_ResponseBase): ...
class Response(_ResponseBase): ...

class Data(_EventBundle):
    @property
    def data(self) -> bytes: ...

class EndOfMessage(_EventBundle): ...
class ConnectionClosed(_EventBundle): ...
